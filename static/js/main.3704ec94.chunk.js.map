{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Statistics/Statistics.module.css"],"names":["FeedbackOptions","goodHandleIncrement","neutralHandleIncrement","badHandleIncrement","className","css","container","button","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","p","Section","text","children","Notification","message","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3704ec94.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./FeedbackOptions.module.css\";\r\n\r\nconst FeedbackOptions = ({ goodHandleIncrement, neutralHandleIncrement, badHandleIncrement }) => (\r\n    <div className={css.container}>\r\n        <button \r\n            className={css.button}\r\n            type =\"button\" \r\n            onClick={goodHandleIncrement}\r\n            > \r\n            Good\r\n        </button>\r\n\r\n        <button \r\n            className={css.button}\r\n            type =\"button\" \r\n            onClick={neutralHandleIncrement}\r\n            > \r\n            Neutral\r\n        </button>\r\n\r\n        <button \r\n            className={css.button}\r\n            type =\"button\" \r\n            onClick={badHandleIncrement}\r\n            >\r\n            Bad \r\n        </button>\r\n    </div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n    goodHandleIncrement: PropTypes.func.isRequired,\r\n    neutralHandleIncrement: PropTypes.func.isRequired,\r\n    badHandleIncrement: PropTypes.func.isRequired,\r\n  };\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./Statistics.module.css\";\r\n\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage=0 }) =>{\r\n    return (        \r\n        <div>\r\n            <p className={css.p}>Statistics: </p>\r\n            <span>Good: {good}</span> <br></br>\r\n            <span>Neutral: {neutral}</span> <br></br>\r\n            <span>Bad: {bad}</span> <br></br>\r\n            <span>Total: {total}</span> <br></br>\r\n            <span>Positive feedback: {positivePercentage} % </span>\r\n        </div>\r\n    )\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n  };\r\n\r\n\r\nexport default Statistics;\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./Section.module.css\";\r\n\r\nconst Section = ({ text, children }) =>(\r\n    <div className={css.container}>\r\n        {text && <span className={css.text}>{text}</span>}\r\n        {children}    \r\n    </div>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node.isRequired,\r\n  };\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n// import css from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ message }) =>(\r\n    <div>\r\n        <span>{message}</span>        \r\n    </div>\r\n);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n  };\r\n\r\nexport default Notification;","import React from 'react';\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Section from './components/Section/Section';\r\nimport Notification from './components/Notification/Notification';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    }\r\n\r\n    goodHandleIncrement = () => {\r\n        this.setState(prevState => ({\r\n            good: prevState.good + 1,                \r\n        }));\r\n    };\r\n\r\n    neutralHandleIncrement = () => {\r\n        this.setState(prevState => ({\r\n            neutral: prevState.neutral + 1,                           \r\n        }));\r\n    };\r\n\r\n    badHandleIncrement = () => {\r\n        this.setState(prevState => ({\r\n            bad: prevState.bad + 1,                           \r\n        }));\r\n    }\r\n\r\n    countTotalFeedback = () => {\r\n        return this.state.good + this.state.neutral + this.state.bad;\r\n    };\r\n\r\n    countPositiveFeedbackPercentage = () => {\r\n        return Math.round((this.state.good * 100)/(this.state.good + this.state.neutral + this.state.bad))        \r\n    }\r\n\r\n    render(){\r\n        const total = this.countTotalFeedback();\r\n        const positivePercentage = this.countPositiveFeedbackPercentage();\r\n        return (\r\n        <div>\r\n            <Section text=\"Please leave feedback\">\r\n              \r\n              <FeedbackOptions \r\n                goodHandleIncrement = {this.goodHandleIncrement} \r\n                neutralHandleIncrement={this.neutralHandleIncrement} \r\n                badHandleIncrement={this.badHandleIncrement} \r\n               />\r\n            </Section>\r\n            \r\n            <Section >\r\n            {total > 0 ? (\r\n                <Statistics \r\n                    good={this.state.good} \r\n                    neutral={this.state.neutral} \r\n                    bad={this.state.bad} \r\n                    total={total} \r\n                    positivePercentage={positivePercentage}\r\n                /> ) : (\r\n                    <Notification \r\n                    message=\"No feedback given\"\r\n                />\r\n                )}\r\n            </Section>\r\n        </div>\r\n        )    \r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3ue0O\",\"container\":\"FeedbackOptions_container__2cGG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3sqGj\",\"text\":\"Section_text__3F-Dr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"p\":\"Statistics_p__2KEWL\"};"],"sourceRoot":""}